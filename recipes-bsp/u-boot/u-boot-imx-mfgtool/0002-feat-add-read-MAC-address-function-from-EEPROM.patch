From 3dfda096c018361eae61fe53861add258587c4c0 Mon Sep 17 00:00:00 2001
From: "ktim.chen" <ktim.chen@axiomtek.com.tw>
Date: Sat, 30 Jul 2022 08:58:27 +0800
Subject: [PATCH 02/13] feat: add read MAC address function from EEPROM

---
 board/axiomtek/common/Makefile    |   3 +
 board/axiomtek/common/ax_eeprom.c | 123 ++++++++++++++++++++++++++++++
 board/axiomtek/common/ax_eeprom.h |  25 ++++++
 board/axiomtek/q7m120/q7m120.c    |  21 +++++
 4 files changed, 172 insertions(+)
 mode change 100644 => 100755 board/axiomtek/common/Makefile
 create mode 100755 board/axiomtek/common/ax_eeprom.c
 create mode 100755 board/axiomtek/common/ax_eeprom.h

diff --git a/board/axiomtek/common/Makefile b/board/axiomtek/common/Makefile
old mode 100644
new mode 100755
index de93a3ce40..cabad6d1e0
--- a/board/axiomtek/common/Makefile
+++ b/board/axiomtek/common/Makefile
@@ -63,6 +63,9 @@ obj-$(CONFIG_MXC_EPDC)		+= epdc_setup.o
 ifneq (,$(filter $(SOC), mx25 mx31 mx35 mx5 mx6 mx7 mx7ulp imx8 imx8m vf610 imx8ulp))
 obj-y				+= mmc.o
 endif
+
+obj-y				+= ax_eeprom.o
+
 ifdef CONFIG_FSL_FASTBOOT
 obj-${CONFIG_ANDROID_RECOVERY} += recovery_keypad.o
 endif
diff --git a/board/axiomtek/common/ax_eeprom.c b/board/axiomtek/common/ax_eeprom.c
new file mode 100755
index 0000000000..305edd5dca
--- /dev/null
+++ b/board/axiomtek/common/ax_eeprom.c
@@ -0,0 +1,123 @@
+/*
+ * Copyright 2018 Axiomtek Co., Ltd.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <i2c.h>
+#ifdef CONFIG_DM_I2C
+#include <dm.h>
+#endif
+
+#ifndef CONFIG_SYS_I2C_EEPROM_ADDR
+#ifdef CONFIG_AX_RBOX630
+#define CONFIG_SYS_I2C_EEPROM_ADDR	0x51
+#endif
+#endif
+
+#define CONFIG_SYS_I2C_EEPROM_ADDR_LEN  1
+
+#ifndef CONFIG_SYS_I2C_EEPROM_BUS
+#ifdef CONFIG_AX_RBOX630
+#define CONFIG_SYS_I2C_EEPROM_BUS	1
+#endif
+#endif
+
+#ifndef MAC_ADDR_OFFSET
+#define MAC_ADDR_OFFSET			0x50
+#endif
+
+#ifdef CONFIG_DM_I2C
+static struct udevice *g_dev = NULL;
+#endif
+
+#ifdef CONFIG_DM_I2C
+static int ax_eeprom_init(void)
+{
+	int i2c_bus = CONFIG_SYS_I2C_EEPROM_BUS;
+	uint8_t chip = CONFIG_SYS_I2C_EEPROM_ADDR;
+
+	struct udevice *bus, *dev;
+	int ret;
+
+	if (!g_dev) {
+		ret = uclass_get_device_by_seq(UCLASS_I2C, i2c_bus, &bus);
+		if (ret) {
+			printf("%s: No bus %d\n", __func__, i2c_bus);
+			return ret;
+		}
+
+		ret = dm_i2c_probe(bus, chip, 0, &dev);
+		if (ret) {
+			printf("%s: Can't find device id=0x%x, on bus %d\n",
+				 __func__, chip, i2c_bus);
+			return ret;
+		}
+
+		/* Init */
+		g_dev = dev;
+	}
+	return 0;
+}
+
+static int ax_eeprom_read(uint eeprom_bus, uint offset, uchar *buf, int len)
+{
+	int res;
+
+	res = ax_eeprom_init();
+	if (res < 0)
+		return res;
+
+	res = dm_i2c_read(g_dev, offset, buf, len);
+
+	return res;
+}
+#else
+static int ax_eeprom_read(uint eeprom_bus, uint offset, uchar *buf, int len)
+{
+	int res;
+	unsigned int current_i2c_bus = i2c_get_bus_num();
+
+	res = i2c_set_bus_num(eeprom_bus);
+	if (res < 0)
+		return res;
+
+	res = i2c_read(CONFIG_SYS_I2C_EEPROM_ADDR, offset,
+			CONFIG_SYS_I2C_EEPROM_ADDR_LEN, buf, len);
+
+	i2c_set_bus_num(current_i2c_bus);
+
+	return res;
+}
+#endif
+
+/*
+ * Routine: eeprom_read_mac_addr
+ * Description: read mac address and store it in buf.
+ */
+int eeprom_read_mac_addr(uchar *buf)
+{
+	uint offset;
+	int page, count, res;
+
+	offset = MAC_ADDR_OFFSET;
+
+	for (page=0x00,count=0;page<0x30,count<6;page+=0x10,count+=2)
+	{
+		res = ax_eeprom_read(CONFIG_SYS_I2C_EEPROM_BUS, (offset + page), (buf + count), 2);
+		if (res)
+			return res;
+	}
+
+	return 0;
+}
+
+/*
+ * Routine: eeprom_read_data
+ * Description: read data and store it in buf.
+ */
+int eeprom_read_data(uchar *buf, uint offset, int len)
+{
+	return ax_eeprom_read(CONFIG_SYS_I2C_EEPROM_BUS, offset, buf, len);
+}
diff --git a/board/axiomtek/common/ax_eeprom.h b/board/axiomtek/common/ax_eeprom.h
new file mode 100755
index 0000000000..bb84104682
--- /dev/null
+++ b/board/axiomtek/common/ax_eeprom.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright 2018 Axiomtek Co., Ltd.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef _EEPROM_
+#define _EEPROM_
+
+#if defined(CONFIG_SYS_I2C) || defined(CONFIG_DM_I2C)
+int eeprom_read_mac_addr(uchar *buf);
+int eeprom_read_data(uchar *buf, uint offset, int len);
+#else
+static inline int eeprom_read_mac_addr(uchar *buf)
+{
+	return 1;
+}
+
+static inline int eeprom_read_data(uchar *buf, uint offset, int len)
+{
+	return 1;
+}
+#endif
+
+#endif
diff --git a/board/axiomtek/q7m120/q7m120.c b/board/axiomtek/q7m120/q7m120.c
index 2ed48eb8c4..f54fa49ab4 100755
--- a/board/axiomtek/q7m120/q7m120.c
+++ b/board/axiomtek/q7m120/q7m120.c
@@ -49,6 +49,7 @@
 #include <recovery.h>
 #endif
 #endif /*CONFIG_FSL_FASTBOOT*/
+#include "../common/ax_eeprom.h"
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -75,6 +76,8 @@ DECLARE_GLOBAL_DATA_PTR;
 
 #define I2C_PAD MUX_PAD_CTRL(I2C_PAD_CTRL)
 
+#define NO_MAC_ADDR             "No MAC address found from EEPROM for %s\n"
+
 int dram_init(void)
 {
 	gd->ram_size = imx_ddr_size();
@@ -263,6 +266,21 @@ static void setup_fec(void)
 	}
 }
 
+static int handle_mac_address(char *env_var)
+{
+        unsigned char enetaddr[6];
+        int rc;
+
+        rc = eeprom_read_mac_addr(enetaddr);
+        if (rc)
+                return rc;
+
+        if (!is_valid_ethaddr(enetaddr))
+                return -1;
+
+        return eth_env_set_enetaddr(env_var, enetaddr);
+}
+
 #ifdef CONFIG_USB_EHCI_MX6
 int board_ehci_hcd_init(int port)
 {
@@ -715,5 +733,8 @@ int board_late_init(void)
 	board_late_mmc_env_init();
 #endif
 
+	if (handle_mac_address("ethaddr"))
+		printf(NO_MAC_ADDR, "primary NIC");
+
 	return 0;
 }
-- 
2.17.1

