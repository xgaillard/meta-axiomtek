From 97037484378d2ac000b4da14806b76c4a145d17f Mon Sep 17 00:00:00 2001
From: "ktim.chen" <ktim.chen@axiomtek.com.tw>
Date: Sun, 31 Jul 2022 14:41:50 +0800
Subject: [PATCH 3/8] feat: add axio_cpld driver

    - Provide interface to access Axiomtek CPLD
    - Support device: rBOX630
---
 arch/arm/configs/imx_v7_defconfig |   1 +
 drivers/misc/Kconfig              |  11 +
 drivers/misc/Makefile             |   1 +
 drivers/misc/axio_cpld.c          | 809 ++++++++++++++++++++++++++++++
 drivers/misc/axio_cpld.h          |  14 +
 5 files changed, 836 insertions(+)
 mode change 100644 => 100755 drivers/misc/Kconfig
 mode change 100644 => 100755 drivers/misc/Makefile
 create mode 100755 drivers/misc/axio_cpld.c
 create mode 100755 drivers/misc/axio_cpld.h

diff --git a/arch/arm/configs/imx_v7_defconfig b/arch/arm/configs/imx_v7_defconfig
index 6e2da7ce3cac..176d64c599ba 100755
--- a/arch/arm/configs/imx_v7_defconfig
+++ b/arch/arm/configs/imx_v7_defconfig
@@ -585,3 +585,4 @@ CONFIG_DEBUG_FS=y
 # CONFIG_SCHED_DEBUG is not set
 # CONFIG_DEBUG_PREEMPT is not set
 # CONFIG_FTRACE is not set
+# CONFIG_AXIO_CPLD=y
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
old mode 100644
new mode 100755
index 2063f193055a..1dbedb518254
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -486,6 +486,17 @@ config HISI_HIKEY_USB
 	  switching between the dual-role USB-C port and the USB-A host ports
 	  using only one USB controller.
 
+config AXIO_CPLD
+	tristate "Axiomtek CPLD driver"
+	depends on I2C && REGMAP
+	default n
+	help
+	  If you say yes here you get support for the Axiomtek RB217
+	  CPLD chip.
+
+	  This driver can also be built as a module.  If so, the module
+	  will be called axio_cpld.
+
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
old mode 100644
new mode 100755
index 5e27f80f6e0e..96724a525157
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -59,3 +59,4 @@ obj-$(CONFIG_HABANA_AI)		+= habanalabs/
 obj-$(CONFIG_UACCE)		+= uacce/
 obj-$(CONFIG_XILINX_SDFEC)	+= xilinx_sdfec.o
 obj-$(CONFIG_HISI_HIKEY_USB)	+= hisi_hikey_usb.o
+obj-$(CONFIG_AXIO_CPLD)		+= axio_cpld.o
diff --git a/drivers/misc/axio_cpld.c b/drivers/misc/axio_cpld.c
new file mode 100755
index 000000000000..649ee0739dcd
--- /dev/null
+++ b/drivers/misc/axio_cpld.c
@@ -0,0 +1,809 @@
+/*
+ * Copyright (c) 2019 Axiomtek Co., Ltd.
+ *
+ * SPDX-License-Identifier:     GPL-2.0+
+ */
+
+#include <linux/i2c.h>
+#include <linux/regmap.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/slab.h>
+#include <linux/of.h>
+#include <linux/sysfs.h>
+
+#include "axio_cpld.h"
+
+#define AXIO_CPLD_REG_VID0		0x00
+#define AXIO_CPLD_REG_VID1		0x01
+#define AXIO_CPLD_REG_DID0		0x02
+#define AXIO_CPLD_REG_DID1		0x03
+#define AXIO_CPLD_REG_RID		0x08
+#define AXIO_CPLD_BANK_SEL		0x4e
+#define AXIO_CPLD_REG50			0x50
+#define AXIO_CPLD_REG51			0x51
+#define AXIO_CPLD_REG52			0x52
+#define AXIO_CPLD_REG53			0x53
+#define AXIO_CPLD_VID_VAL		0x3088
+#define AXIO_CPLD_DATA_SHIFT		8
+
+#define AXIO_CPLD_CONF_BANK		0
+#define AXIO_CPLD_SYS_BANK		1
+#define AXIO_CPLD_COM_BANK		2
+#define AXIO_CPLD_USB_BANK		3
+#define AXIO_CPLD_WDT_BANK		4
+#define AXIO_CPLD_GPI_BANK		5
+#define AXIO_CPLD_GPO_BANK		6
+#define AXIO_CPLD_CAN_BANK		7
+
+#define AXIO_CPLD_ALARM_CTL		(1 << 7) /* Alarm control */
+#define AXIO_CPLD_PWR_DC2		(1 << 1) /* Power2 status */
+#define AXIO_CPLD_PWR_DC1		(1 << 0) /* Power1 status */
+#define AXIO_CPLD_ALARM_STATUS		(1 << 7) /* Alarm status */
+#define AXIO_CPLD_PWR_ALARM_EN		(1 << 6) /* Power fail alarm */
+#define AXIO_CPLD_RDYACT_LED_SEL	(1 << 0) /* RDY/ACT LED indicate source */
+
+#define AXIO_CPLD_COM_TERM_EN		(1 << 2) /* COM Port Terminal Enable */
+#define AXIO_CPLD_COM_MODE		(1 << 0) /* COM Port MODE */
+#define AXIO_CPLD_COM_MODE_MASK		0x03	 /* bit 1~0 */
+#define COM_RS232			1
+#define COM_RS422			2
+#define COM_RS485			3
+#define COM1				1
+#define COM2				2
+#define COM3				3
+#define COM4				4
+
+#define AXIO_CPLD_USB_NUM		(1 << 0) /* Amount of USB port */
+#define AXIO_CPLD_USB2_PWR_DISABLE	(1 << 1) /* Disable USB2 Power */
+#define AXIO_CPLD_USB1_PWR_DISABLE	(1 << 0) /* Disable USB1 Power */
+#define AXIO_CPLD_USB2_OC		(1 << 1) /* USB2 Over Current status */
+#define AXIO_CPLD_USB1_OC		(1 << 0) /* USB1 Over Current status */
+
+#define AXIO_CPLD_WDT_EN		(1 << 6) /* Enable Watchdog timer */
+#define AXIO_CPLD_WDT_VAL		(1 << 0) /* Watchdog timer value */
+
+#define AXIO_CPLD_CAN1_TERM_EN		(1 << 4) /* CAN1 Terminal Enable */
+#define AXIO_CPLD_CAN0_TERM_EN		(1 << 0) /* CAN0 Terminal Enable */
+
+static const struct regmap_range yes_ranges[] = {
+	regmap_reg_range(AXIO_CPLD_REG_VID0, AXIO_CPLD_REG_DID1),
+	regmap_reg_range(AXIO_CPLD_REG_RID, AXIO_CPLD_REG_RID),
+	regmap_reg_range(AXIO_CPLD_BANK_SEL, AXIO_CPLD_BANK_SEL),
+	regmap_reg_range(AXIO_CPLD_REG50, AXIO_CPLD_REG53),
+};
+
+static const struct regmap_access_table access_table = {
+	.yes_ranges	= yes_ranges,
+	.n_yes_ranges	= ARRAY_SIZE(yes_ranges),
+};
+
+static const struct regmap_config axio_cpld_regmap_i2c_conf = {
+	.reg_bits = 8,
+	.val_bits = 8,
+	.rd_table = &access_table,
+	.wr_table = &access_table,
+	.max_register = 0x80,
+};
+
+struct axio_cpld_data {
+	struct  device *dev;
+	struct  regmap *regmap;
+	struct	mutex lock;
+	int	com_nums;
+	u16	vendor_id;
+	u16	device_id;
+	u8	revision_id;
+	u8	pwr1_status:1;
+	u8	pwr2_status:1;
+	u8	alarm_status:1;
+};
+
+static int axio_cpld_select_bank(struct axio_cpld_data *data, int bank)
+{
+	return regmap_write(data->regmap, AXIO_CPLD_BANK_SEL, bank);
+}
+
+static int axio_cpld_detect(struct axio_cpld_data *data)
+{
+	struct device *dev = regmap_get_device(data->regmap);
+	int ret;
+	unsigned int val;
+
+	ret = regmap_read(data->regmap, AXIO_CPLD_REG_VID0, &val);
+	if (ret < 0) {
+		dev_err(dev, "Error reading reg_vid0\n");
+		return ret;
+	}
+	data->vendor_id = val;
+
+	ret = regmap_read(data->regmap, AXIO_CPLD_REG_VID1, &val);
+	if (ret < 0) {
+		dev_err(dev, "Error reading reg_vid1\n");
+		return ret;
+	}
+	data->vendor_id |= val << AXIO_CPLD_DATA_SHIFT;
+
+	dev_dbg(dev, "Vendor Id %x\n", data->vendor_id);
+
+	if (data->vendor_id != AXIO_CPLD_VID_VAL) {
+		dev_err(dev, "invalid chip %x\n", val);
+		return -ENODEV;
+	}
+
+	ret = regmap_read(data->regmap, AXIO_CPLD_REG_DID0, &val);
+	if (ret < 0) {
+		dev_err(dev, "Error reading reg_did0\n");
+		return ret;
+	}
+	data->device_id = val;
+
+	ret = regmap_read(data->regmap, AXIO_CPLD_REG_DID1, &val);
+	if (ret < 0) {
+		dev_err(dev, "Error reading reg_did1\n");
+		return ret;
+	}
+	data->device_id |= val << AXIO_CPLD_DATA_SHIFT;
+
+	dev_dbg(dev, "Device Id %x\n", data->device_id);
+
+	ret = regmap_read(data->regmap, AXIO_CPLD_REG_RID, &val);
+	if (ret < 0) {
+		dev_err(dev, "Error reading reg_rid\n");
+		return ret;
+	}
+	data->revision_id = val;
+
+	dev_dbg(dev, "Revision Id %x\n", data->revision_id);
+
+	return 0;
+}
+
+
+static int axio_cpld_get_system_status(struct axio_cpld_data *data)
+{
+	int ret;
+	unsigned int val;
+
+	mutex_lock(&data->lock);
+	ret = axio_cpld_select_bank(data, AXIO_CPLD_SYS_BANK);
+	if (ret < 0) {
+		mutex_unlock(&data->lock);
+		return ret;
+	}
+	mutex_unlock(&data->lock);
+
+	ret = regmap_read(data->regmap, AXIO_CPLD_REG50, &val);
+	data->pwr1_status = (val & AXIO_CPLD_PWR_DC1) ? 1 : 0;
+	data->pwr2_status = (val & AXIO_CPLD_PWR_DC2) ? 1 : 0;
+
+	ret = regmap_read(data->regmap, AXIO_CPLD_REG51, &val);
+	data->alarm_status = (val & AXIO_CPLD_ALARM_STATUS) ? 1 : 0;
+
+	return 0;
+}
+
+static int axio_cpld_get_comport_mode(struct axio_cpld_data *data, int num)
+{
+	int ret;
+	unsigned int val;
+
+	mutex_lock(&data->lock);
+	ret = axio_cpld_select_bank(data, AXIO_CPLD_COM_BANK);
+	if (ret < 0) {
+		mutex_unlock(&data->lock);
+		return ret;
+	}
+	mutex_unlock(&data->lock);
+
+	switch (num) {
+		case COM1:
+			regmap_read(data->regmap, AXIO_CPLD_REG50, &val);
+			break;
+		case COM2:
+			regmap_read(data->regmap, AXIO_CPLD_REG51, &val);
+			break;
+		case COM3:
+			regmap_read(data->regmap, AXIO_CPLD_REG52, &val);
+			break;
+		case COM4:
+			regmap_read(data->regmap, AXIO_CPLD_REG53, &val);
+			break;
+		default:
+			break;
+	}
+
+	return (val & AXIO_CPLD_COM_MODE_MASK);
+}
+
+static int axio_cpld_set_comport_mode(struct axio_cpld_data *data, int num, int mode)
+{
+	int ret;
+	unsigned int val;
+
+	mutex_lock(&data->lock);
+	ret = axio_cpld_select_bank(data, AXIO_CPLD_COM_BANK);
+	if (ret < 0) {
+		mutex_unlock(&data->lock);
+		return ret;
+	}
+
+	switch (num) {
+		case COM1:
+			ret = regmap_read(data->regmap, AXIO_CPLD_REG50, &val);
+			regmap_write(data->regmap, AXIO_CPLD_REG50, ((val & ~(AXIO_CPLD_COM_MODE_MASK)) | mode));
+			break;
+		case COM2:
+			ret = regmap_read(data->regmap, AXIO_CPLD_REG51, &val);
+			regmap_write(data->regmap, AXIO_CPLD_REG51, ((val & ~(AXIO_CPLD_COM_MODE_MASK)) | mode));
+			break;
+		case COM3:
+			ret = regmap_read(data->regmap, AXIO_CPLD_REG52, &val);
+			regmap_write(data->regmap, AXIO_CPLD_REG52, ((val & ~(AXIO_CPLD_COM_MODE_MASK)) | mode));
+			break;
+		case COM4:
+			ret = regmap_read(data->regmap, AXIO_CPLD_REG53, &val);
+			regmap_write(data->regmap, AXIO_CPLD_REG53, ((val & ~(AXIO_CPLD_COM_MODE_MASK)) | mode));
+			break;
+		default:
+			break;
+	}
+
+	mutex_unlock(&data->lock);
+
+	return 0;
+}
+
+static int axio_cpld_get_comport_termination(struct axio_cpld_data *data, int num)
+{
+	int ret;
+	unsigned int val;
+
+	mutex_lock(&data->lock);
+	ret = axio_cpld_select_bank(data, AXIO_CPLD_COM_BANK);
+	if (ret < 0) {
+		mutex_unlock(&data->lock);
+		return ret;
+	}
+	mutex_unlock(&data->lock);
+
+	switch (num) {
+		case COM1:
+			regmap_read(data->regmap, AXIO_CPLD_REG50, &val);
+			break;
+		case COM2:
+			regmap_read(data->regmap, AXIO_CPLD_REG51, &val);
+			break;
+		case COM3:
+			regmap_read(data->regmap, AXIO_CPLD_REG52, &val);
+			break;
+		case COM4:
+			regmap_read(data->regmap, AXIO_CPLD_REG53, &val);
+			break;
+		default:
+			break;
+	}
+
+	return (val & AXIO_CPLD_COM_TERM_EN);
+}
+
+static int axio_cpld_set_comport_termination(struct axio_cpld_data *data, int num, int onoff)
+{
+	int ret;
+	unsigned int val;
+
+	mutex_lock(&data->lock);
+	ret = axio_cpld_select_bank(data, AXIO_CPLD_COM_BANK);
+	if (ret < 0) {
+		mutex_unlock(&data->lock);
+		return ret;
+	}
+
+	switch (num) {
+		case COM1:
+			ret = regmap_read(data->regmap, AXIO_CPLD_REG50, &val);
+			regmap_write(data->regmap, AXIO_CPLD_REG50, ((onoff << 2) | val));
+			break;
+		case COM2:
+			ret = regmap_read(data->regmap, AXIO_CPLD_REG51, &val);
+			regmap_write(data->regmap, AXIO_CPLD_REG51, ((onoff << 2) | val));
+			break;
+		case COM3:
+			ret = regmap_read(data->regmap, AXIO_CPLD_REG52, &val);
+			regmap_write(data->regmap, AXIO_CPLD_REG52, ((onoff << 2) | val));
+			break;
+		case COM4:
+			ret = regmap_read(data->regmap, AXIO_CPLD_REG53, &val);
+			regmap_write(data->regmap, AXIO_CPLD_REG53, ((onoff << 2) | val));
+			break;
+		default:
+			break;
+	}
+
+	mutex_unlock(&data->lock);
+
+	return 0;
+}
+
+static ssize_t 
+show_pwr1(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+
+	if (data->pwr1_status)
+		return sprintf(buf, "good\n");
+	else
+		return sprintf(buf, "fail\n");
+}
+static DEVICE_ATTR(pwr1_status, S_IRUGO, show_pwr1, NULL);
+
+static ssize_t 
+show_pwr2(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+
+	if (data->pwr2_status)
+		return sprintf(buf, "good\n");
+	else
+		return sprintf(buf, "fail\n");
+}
+static DEVICE_ATTR(pwr2_status, S_IRUGO, show_pwr2, NULL);
+
+static ssize_t 
+com1_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int val;
+
+	val = axio_cpld_get_comport_mode(data, COM1);
+	
+	if (COM1 <= data->com_nums) {
+		if (val == COM_RS232)
+			return sprintf(buf, "rs232\n");
+		else if (val == COM_RS422)
+			return sprintf(buf, "rs422\n");
+		else if (val == COM_RS485)
+			return sprintf(buf, "rs485\n");
+		else
+			return sprintf(buf, "none\n");
+	}
+	else
+		return sprintf(buf, "not support\n");
+}
+
+static ssize_t 
+com1_store(struct device *dev, struct device_attribute *attr, 
+	   const char *buf, size_t count)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int ret;
+
+	if (!strncmp(buf, "rs232", sizeof("rs232") - 1))
+		ret = axio_cpld_set_comport_mode(data, COM1, COM_RS232);
+	else if (!strncmp(buf, "rs422", sizeof("rs422") - 1))
+		ret = axio_cpld_set_comport_mode(data, COM1, COM_RS422);
+	else if (!strncmp(buf, "rs485", sizeof("rs485") - 1))
+		ret = axio_cpld_set_comport_mode(data, COM1, COM_RS485);
+	else
+		ret = -EINVAL;
+	
+	if (ret)
+		return ret;
+
+	return count;
+}
+static DEVICE_ATTR(com1_mode, S_IRUGO | S_IWUSR, com1_show, com1_store);
+
+static ssize_t 
+com2_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int val;
+
+	val = axio_cpld_get_comport_mode(data, COM2);
+	
+	if (COM2 <= data->com_nums) {
+		if (val == COM_RS232)
+			return sprintf(buf, "rs232\n");
+		else if (val == COM_RS422)
+			return sprintf(buf, "rs422\n");
+		else if (val == COM_RS485)
+			return sprintf(buf, "rs485\n");
+		else
+			return sprintf(buf, "none\n");
+	}
+	else
+		return sprintf(buf, "not support\n");
+}
+
+static ssize_t 
+com2_store(struct device *dev, struct device_attribute *attr, 
+	   const char *buf, size_t count)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int ret;
+
+	if (!strncmp(buf, "rs232", sizeof("rs232") - 1))
+		ret = axio_cpld_set_comport_mode(data, COM2, COM_RS232);
+	else if (!strncmp(buf, "rs422", sizeof("rs422") - 1))
+		ret = axio_cpld_set_comport_mode(data, COM2, COM_RS422);
+	else if (!strncmp(buf, "rs485", sizeof("rs485") - 1))
+		ret = axio_cpld_set_comport_mode(data, COM2, COM_RS485);
+	else
+		ret = -EINVAL;
+	
+	if (ret)
+		return ret;
+
+	return count;
+}
+static DEVICE_ATTR(com2_mode, S_IRUGO | S_IWUSR, com2_show, com2_store);
+
+static ssize_t 
+com3_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int val;
+
+	val = axio_cpld_get_comport_mode(data, COM3);
+	
+	if (COM3 <= data->com_nums) {
+		if (val == COM_RS232)
+			return sprintf(buf, "rs232\n");
+		else if (val == COM_RS422)
+			return sprintf(buf, "rs422\n");
+		else if (val == COM_RS485)
+			return sprintf(buf, "rs485\n");
+		else
+			return sprintf(buf, "none\n");
+	}
+	else
+		return sprintf(buf, "not support\n");
+}
+
+static ssize_t 
+com3_store(struct device *dev, struct device_attribute *attr, 
+	   const char *buf, size_t count)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int ret;
+
+	if (!strncmp(buf, "rs232", sizeof("rs232") - 1))
+		ret = axio_cpld_set_comport_mode(data, COM3, COM_RS232);
+	else if (!strncmp(buf, "rs422", sizeof("rs422") - 1))
+		ret = axio_cpld_set_comport_mode(data, COM3, COM_RS422);
+	else if (!strncmp(buf, "rs485", sizeof("rs485") - 1))
+		ret = axio_cpld_set_comport_mode(data, COM3, COM_RS485);
+	else
+		ret = -EINVAL;
+	
+	if (ret)
+		return ret;
+
+	return count;
+}
+static DEVICE_ATTR(com3_mode, S_IRUGO | S_IWUSR, com3_show, com3_store);
+
+static ssize_t 
+com4_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int val;
+
+	val = axio_cpld_get_comport_mode(data, COM4);
+	
+	if (COM4 <= data->com_nums) {
+		if (val == COM_RS232)
+			return sprintf(buf, "rs232\n");
+		else if (val == COM_RS422)
+			return sprintf(buf, "rs422\n");
+		else if (val == COM_RS485)
+			return sprintf(buf, "rs485\n");
+		else
+			return sprintf(buf, "none\n");
+	}
+	else
+		return sprintf(buf, "not support\n");
+}
+
+static ssize_t 
+com4_store(struct device *dev, struct device_attribute *attr, 
+	   const char *buf, size_t count)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int ret;
+
+	if (!strncmp(buf, "rs232", sizeof("rs232") - 1))
+		ret = axio_cpld_set_comport_mode(data, COM4, COM_RS232);
+	else if (!strncmp(buf, "rs422", sizeof("rs422") - 1))
+		ret = axio_cpld_set_comport_mode(data, COM4, COM_RS422);
+	else if (!strncmp(buf, "rs485", sizeof("rs485") - 1))
+		ret = axio_cpld_set_comport_mode(data, COM4, COM_RS485);
+	else
+		ret = -EINVAL;
+	
+	if (ret)
+		return ret;
+
+	return count;
+}
+static DEVICE_ATTR(com4_mode, S_IRUGO | S_IWUSR, com4_show, com4_store);
+
+static ssize_t 
+com1t_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int val;
+
+	val = axio_cpld_get_comport_termination(data, COM1);
+	
+	if (COM1 <= data->com_nums) {
+		if (val == 0)
+			return sprintf(buf, "disable\n");
+		else
+			return sprintf(buf, "enable\n");
+	}
+	else
+		return sprintf(buf, "not support\n");
+}
+
+static ssize_t 
+com1t_store(struct device *dev, struct device_attribute *attr, 
+	   const char *buf, size_t count)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int ret;
+
+	if (!strncmp(buf, "enable", sizeof("enable") - 1))
+		ret = axio_cpld_set_comport_termination(data, COM1, 1);
+	else if (!strncmp(buf, "disable", sizeof("disable") - 1))
+		ret = axio_cpld_set_comport_termination(data, COM1, 0);
+	else
+		ret = -EINVAL;
+	
+	if (ret)
+		return ret;
+
+	return count;
+}
+static DEVICE_ATTR(com1_termination, S_IRUGO | S_IWUSR, com1t_show, com1t_store);
+
+static ssize_t 
+com2t_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int val;
+
+	val = axio_cpld_get_comport_termination(data, COM2);
+	
+	if (COM2 <= data->com_nums) {
+		if (val == 0)
+			return sprintf(buf, "disable\n");
+		else
+			return sprintf(buf, "enable\n");
+	}
+	else
+		return sprintf(buf, "not support\n");
+}
+
+static ssize_t 
+com2t_store(struct device *dev, struct device_attribute *attr, 
+	   const char *buf, size_t count)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int ret;
+
+	if (!strncmp(buf, "enable", sizeof("enable") - 1))
+		ret = axio_cpld_set_comport_termination(data, COM2, 1);
+	else if (!strncmp(buf, "disable", sizeof("disable") - 1))
+		ret = axio_cpld_set_comport_termination(data, COM2, 0);
+	else
+		ret = -EINVAL;
+	
+	if (ret)
+		return ret;
+
+	return count;
+}
+static DEVICE_ATTR(com2_termination, S_IRUGO | S_IWUSR, com2t_show, com2t_store);
+
+static ssize_t 
+com3t_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int val;
+
+	val = axio_cpld_get_comport_termination(data, COM3);
+	
+	if (COM3 <= data->com_nums) {
+		if (val == 0)
+			return sprintf(buf, "disable\n");
+		else
+			return sprintf(buf, "enable\n");
+	}
+	else
+		return sprintf(buf, "not support\n");
+}
+
+static ssize_t 
+com3t_store(struct device *dev, struct device_attribute *attr, 
+	   const char *buf, size_t count)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int ret;
+
+	if (!strncmp(buf, "enable", sizeof("enable") - 1))
+		ret = axio_cpld_set_comport_termination(data, COM3, 1);
+	else if (!strncmp(buf, "disable", sizeof("disable") - 1))
+		ret = axio_cpld_set_comport_termination(data, COM3, 0);
+	else
+		ret = -EINVAL;
+	
+	if (ret)
+		return ret;
+
+	return count;
+}
+static DEVICE_ATTR(com3_termination, S_IRUGO | S_IWUSR, com3t_show, com3t_store);
+
+static ssize_t 
+com4t_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int val;
+
+	val = axio_cpld_get_comport_termination(data, COM4);
+	
+	if (COM4 <= data->com_nums) {
+		if (val == 0)
+			return sprintf(buf, "disable\n");
+		else
+			return sprintf(buf, "enable\n");
+	}
+	else
+		return sprintf(buf, "not support\n");
+}
+
+static ssize_t 
+com4t_store(struct device *dev, struct device_attribute *attr, 
+	   const char *buf, size_t count)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+	int ret;
+
+	if (!strncmp(buf, "enable", sizeof("enable") - 1))
+		ret = axio_cpld_set_comport_termination(data, COM4, 1);
+	else if (!strncmp(buf, "disable", sizeof("disable") - 1))
+		ret = axio_cpld_set_comport_termination(data, COM4, 0);
+	else
+		ret = -EINVAL;
+	
+	if (ret)
+		return ret;
+
+	return count;
+}
+static DEVICE_ATTR(com4_termination, S_IRUGO | S_IWUSR, com4t_show, com4t_store);
+
+static struct attribute *axio_cpld_attributes[] = {
+	&dev_attr_pwr1_status.attr,
+	&dev_attr_pwr2_status.attr,
+	&dev_attr_com1_mode.attr,
+	&dev_attr_com2_mode.attr,
+	&dev_attr_com3_mode.attr,
+	&dev_attr_com4_mode.attr,
+	&dev_attr_com1_termination.attr,
+	&dev_attr_com2_termination.attr,
+	&dev_attr_com3_termination.attr,
+	&dev_attr_com4_termination.attr,
+	NULL
+};
+
+static const struct attribute_group axio_cpld_attr_group = {
+	.attrs = axio_cpld_attributes,
+};
+
+int axio_cpld_common_probe(struct device *dev, struct regmap *regmap, int irq,
+                      const char *name)
+{
+	struct axio_cpld_data *data;
+	int max_nums, ret=0;
+
+	data = kzalloc(sizeof(struct axio_cpld_data), GFP_KERNEL);
+	if (!data) {
+		ret = -ENOMEM;
+		goto exit;
+	}
+
+	dev_set_drvdata(dev, data);
+	data->regmap = regmap;
+
+	ret = axio_cpld_detect(data);
+	if (ret < 0)
+		goto exit_free;
+
+	ret = of_property_read_u32(dev->of_node, "com-nums", &max_nums);
+	if (ret < 0)
+		data->com_nums = 4;
+	else
+		data->com_nums = max_nums;
+
+	axio_cpld_get_system_status(data);
+
+	ret = sysfs_create_group(&dev->kobj, &axio_cpld_attr_group);
+	if (ret < 0)
+		goto exit_free;
+
+	return 0;
+
+exit_free:
+	kfree(data);
+exit:
+	return ret;
+}
+
+void axio_cpld_common_remove(struct device *dev)
+{
+	struct axio_cpld_data *data = dev_get_drvdata(dev);
+
+	sysfs_remove_group(&dev->kobj, &axio_cpld_attr_group);
+	kfree(data);
+}
+
+static int axio_cpld_i2c_probe(struct i2c_client *client,
+			    const struct i2c_device_id *id)
+{
+	struct regmap *regmap;
+	const char *name = NULL;
+
+	regmap = devm_regmap_init_i2c(client, &axio_cpld_regmap_i2c_conf);
+	if (IS_ERR(regmap)) {
+		dev_err(&client->dev, "Failed to register i2c regmap %d\n",
+			(int)PTR_ERR(regmap));
+		return PTR_ERR(regmap);
+	}
+
+	if (id)
+		name = id->name;
+
+	return axio_cpld_common_probe(&client->dev, regmap, client->irq, name);
+}
+
+static int axio_cpld_i2c_remove(struct i2c_client *client)
+{
+	axio_cpld_common_remove(&client->dev);
+
+	return 0;
+}
+
+static const struct of_device_id axio_cpld_i2c_of_match[] = {
+	{ 
+		.compatible = "axiomtek,rb217", 
+		.data = "rb217", 
+	},
+	{},
+};
+
+MODULE_DEVICE_TABLE(of, axio_cpld_i2c_of_match);
+
+static const struct i2c_device_id axio_cpld_i2c_id[] = {
+	{ "rb217" },
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, axio_cpld_i2c_id);
+
+static struct i2c_driver axio_cpld_i2c_driver = {
+	.driver = {
+		.name	= "axio_cpld",
+		.of_match_table = axio_cpld_i2c_of_match,
+	},
+	.probe		= axio_cpld_i2c_probe,
+	.remove		= axio_cpld_i2c_remove,
+	.id_table	= axio_cpld_i2c_id,
+};
+module_i2c_driver(axio_cpld_i2c_driver);
+
+MODULE_AUTHOR("Wade Lee <wade.lee@axiomtek.com>");
+MODULE_LICENSE("GPL v2");
+MODULE_DESCRIPTION("Axiomtek GPLD driver");
diff --git a/drivers/misc/axio_cpld.h b/drivers/misc/axio_cpld.h
new file mode 100755
index 000000000000..8cf3f9be3b8b
--- /dev/null
+++ b/drivers/misc/axio_cpld.h
@@ -0,0 +1,14 @@
+/*
+ * Copyright (c) 2019 Axiomtek Co., Ltd.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef AXIO_CPLD_H
+#define AXIO_CPLD_H
+
+int axio_cpld_common_probe(struct device *dev, struct regmap *regmap, int irq,
+		      const char *name);
+void axio_cpld_common_remove(struct device *dev);
+
+#endif  /* AXIO_CPLD_H */
-- 
2.17.1

